name: Python-package

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

# automatically cancel in-progress builds if another commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 4
  SKBUILD_STRICT_CONFIG: true

jobs:
  # purpose: test different Python package variants (build options, compiler, Python version)
  test:
    name: ${{ matrix.task }} ${{ matrix.method }} (${{ matrix.os }}, Python ${{ matrix.python_version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: macos-13
          #   task: regular
          #   python_version: '3.10'
          # - os: macos-13
          #   task: sdist
          #   python_version: '3.11'
          # - os: macos-13
          #   task: bdist
          #   python_version: '3.8'
          - os: macos-13
            task: if-else
            python_version: '3.9'
          # We're currently skipping MPI jobs on macOS, see https://github.com/microsoft/LightGBM/pull/6425
          # for further details.
          # - os: macos-13
          #   task: mpi
          #   method: source
          #   python_version: '3.11'
          # - os: macos-13
          #   task: mpi
          #   method: pip
          #   python_version: '3.12'
          # - os: macos-13
          #   task: mpi
          #   method: wheel
          #   python_version: '3.9'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 5
          submodules: true
      - name: Setup and run tests
        shell: bash
        run: |
          export TASK="${{ matrix.task }}"
          export METHOD="${{ matrix.method }}"
          export PYTHON_VERSION="${{ matrix.python_version }}"
          export COMPILER="gcc"
          export OS_NAME="macos"
          export BUILD_DIRECTORY="$GITHUB_WORKSPACE"
          export CONDA=${HOME}/miniforge
          export PATH=${CONDA}/bin:${PATH}
          $GITHUB_WORKSPACE/.ci/setup.sh || exit 1
          $GITHUB_WORKSPACE/.ci/test.sh || exit 1
  # purpose: build macOS wheels to release
  build-and-test-wheels:
    name: ${{ matrix.task }} (${{ matrix.artifact-name }}, Python 3.10)
    runs-on: ${{ matrix.os }}
    env:
      CONDA: /tmp/miniforge
      METHOD: wheel
      PYTHON_VERSION: '3.10'
      TASK: bdist
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            artifact-name: macosx-arm64-wheel
          - os: macos-14
            artifact-name: linux-aarch64-wheel
            container: 'lightgbm/vsts-agent:manylinux2014_aarch64'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 5
          submodules: true
      - name: Setup and run tests
        shell: bash
        run: |
          if [[ "${{ matrix.artifact-name }}" == "macosx-arm64-wheel" ]]; then
              # use clang when creating macOS release artifacts
              export COMPILER="clang"
              export OS_NAME="macos"
              export BUILD_DIRECTORY="$GITHUB_WORKSPACE"
              export PATH=${CONDA}/bin:${PATH}
              $GITHUB_WORKSPACE/.ci/setup.sh || exit 1
              $GITHUB_WORKSPACE/.ci/test.sh || exit 1
          elif [[ "${{ matrix.artifact-name }}" == "linux-aarch64-wheel" ]]; then
              # 'docker' did not come preinstalled on macOS runners as of when this was added
              # ref: https://github.com/actions/runner/issues/1456
              brew install podman
              podman machine start
              podman machine init
              podman run \
                --rm \
                -v $(pwd):/opt/LightGBM \
                -w /opt/LightGBM \
                --env COMPILER=gcc \
                --env CONDA=${CONDA} \
                --env METHOD=${METHOD} \
                --env OS_NAME=linux \
                --env PYTHON_VERSION="${PYTHON_VERSION}" \
                --env TASK=${TASK} \
                -i lightgbm/vsts-agent:manylinux2014_aarch64 \
                bash -c 'PATH="${CONDA}/bin:${PATH}" .ci/setup.sh && PATH="${CONDA}/bin:${PATH}" .ci/test.sh'
          else
              echo "Unrecognized artifact name: '${{ matrix.artifact-name }}'"
              exit 1
          fi
      - name: upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: dist/*.whl
  # purpose: test the Python package against nightlies of its dependencies,
  #          to catch issues before users experience them
  test-latest-versions:
    name: Python - latest versions (ubuntu-latest)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 5
          submodules: true
      - name: Create wheel
        run: |
          docker run \
            --rm \
            --env CMAKE_BUILD_PARALLEL_LEVEL=${{ env.CMAKE_BUILD_PARALLEL_LEVEL }} \
            -v $(pwd):/opt/lgb-build \
            -w /opt/lgb-build \
            lightgbm/vsts-agent:manylinux_2_28_x86_64 \
            /bin/bash -c 'PATH=/opt/miniforge/bin:$PATH sh ./build-python.sh bdist_wheel --nomp'
      - name: Test compatibility
        run: |
          docker run \
            --rm \
            -v $(pwd):/opt/lgb-build \
            -w /opt/lgb-build \
            python:3.11 \
            /bin/bash ./.ci/test-python-latest.sh
  # purpose: test the Python package against the oldest supported versions of its dependencies,
  #          to prevent changes from accidentally breaking compatibility with those older versions
  test-oldest-versions:
    name: Python - oldest supported versions (ubuntu-latest)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 5
          submodules: true
      - name: Create wheel
        run: |
          docker run \
            --rm \
            --env CMAKE_BUILD_PARALLEL_LEVEL=${{ env.CMAKE_BUILD_PARALLEL_LEVEL }} \
            -v $(pwd):/opt/lgb-build \
            -w /opt/lgb-build \
            lightgbm/vsts-agent:manylinux_2_28_x86_64 \
            /bin/bash -c 'PATH=/opt/miniforge/bin:$PATH sh ./build-python.sh bdist_wheel --nomp'
      - name: Test compatibility
        run: |
          docker run \
            --rm \
            -v $(pwd):/opt/lgb-build \
            -w /opt/lgb-build \
            python:3.7 \
            /bin/bash ./.ci/test-python-oldest.sh
  all-python-package-jobs-successful:
    if: always()
    runs-on: ubuntu-latest
    needs: [test, build-and-test-wheels, test-latest-versions, test-oldest-versions]
    steps:
    - name: Note that all tests succeeded
      uses: re-actors/alls-green@v1.2.2
      with:
        jobs: ${{ toJSON(needs) }}
