name: CUDA Version

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
    - release/*

# automatically cancel in-progress builds if another commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # # this works because all these jobs run on a single runner
  # setup-docker:
  #   name: setup-docker
  #   timeout-minutes: 10
  #   steps:
  #     - name: Setup or update software on host machine
  #       run: |
  #           # install core packages
  #           sudo apt-get update
  #           sudo apt-get install --no-install-recommends -y \
  #               apt-transport-https \
  #               ca-certificates \
  #               curl \
  #               gnupg-agent \
  #               lsb-release \
  #               software-properties-common
  #           # install latest git
  #           sudo add-apt-repository ppa:git-core/ppa -y
  #           sudo apt-get update
  #           sudo apt-get install --no-install-recommends -y \
  #               git
  #           # set up nvidia-docker
  #           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  #           sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" -y
  #           curl -sL https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
  #           curl -sL https://nvidia.github.io/nvidia-docker/$(. /etc/os-release;echo $ID$VERSION_ID)/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
  #           sudo apt-get update
  #           sudo apt-get install --no-install-recommends -y \
  #               containerd.io \
  #               docker-ce \
  #               docker-ce-cli \
  #               nvidia-docker2
  #           sudo chmod a+rw /var/run/docker.sock
  #           sudo systemctl restart docker
  test:
    name: ${{ matrix.task }} ${{ matrix.cuda_version }} ${{ matrix.method }} (linux, ${{ matrix.compiler }}, Python ${{ matrix.python_version }})
    runs-on: [self-hosted, linux]
    container:
      image: ${{ matrix.image }}
      env:
        BUILD_DIRECTORY: ${GITHUB_WORKSPACE}
        COMPILER: ${{ matrix.compiler }}
        CONDA_ENV: test-env
        METHOD: ${{ matrix.method }}
        OS_NAME: linux
        PYTHON_VERSION: ${{ matrix.python_version }}
        TASK: ${{ matrix.task }}
      options: --gpus all
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - method: wheel
            compiler: gcc
            python_version: "3.11"
            cuda_version: "11.8.0"
            image: nvcr.io/nvidia/cuda:11.8.0-devel-ubuntu18.04
            task: cuda
          - method: source
            compiler: gcc
            python_version: "3.9"
            cuda_version: "12.2.0"
            image: nvcr.io/nvidia/cuda:12.2.0-devel-ubuntu20.04
            task: cuda
          - method: pip
            compiler: clang
            python_version: "3.10"
            cuda_version: "11.8.0"
            image: nvcr.io/nvidia/cuda:11.8.0-devel-ubuntu18.04
            task: cuda
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: true
      - name: Setup and run tests
        run: |
          export CONDA=\$HOME/miniforge
          export PATH=\$CONDA/bin:\$PATH
          # install latest git
          apt-get update
          apt-get install --no-install-recommends -y \
              ca-certificates \
              gnupg-agent \
              software-properties-common

          add-apt-repository ppa:git-core/ppa -y
          apt-get update
          apt-get install --no-install-recommends -y \
              git

          # check GPU usage
          nvidia-smi

          # build and test
          $GITHUB_WORKSPACE/.ci/setup.sh
          $GITHUB_WORKSPACE/.ci/test.sh
  all-cuda-jobs-successful:
    if: always()
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Note that all tests succeeded
      uses: re-actors/alls-green@v1.2.2
      with:
        jobs: ${{ toJSON(needs) }}
